{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMA57YF8ZsdpqJVqvZCMaA2",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/defneyucesir/gametheory/blob/main/Coursework%201%20-%20Visualisations\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "N.B. The code in this notebook is given to provide a record of how the visualisations in my report were created. However, unlike the code for my sentiment analysis which you can run in colab, this is not runnable here. To run this code follow this link: https://editor.p5js.org/ and input the code in the cell below. I have had to do it this way because Javascript supports real-time 3D rendering but Python does not."
      ],
      "metadata": {
        "id": "ZJzEOWULzmtd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "let angle = 0;\n",
        "let points = [];\n",
        "\n",
        "function setup() {\n",
        "  let size = min(windowWidth, windowHeight);\n",
        "  createCanvas(size, size, WEBGL);\n",
        "\n",
        "  // Define 4D hypercube points\n",
        "  points[0] = new P4Vector(-1, -1, -1, 1);\n",
        "  points[1] = new P4Vector(1, -1, -1, 1);\n",
        "  points[2] = new P4Vector(1, 1, -1, 1);\n",
        "  points[3] = new P4Vector(-1, 1, -1, 1);\n",
        "  points[4] = new P4Vector(-1, -1, 1, 1);\n",
        "  points[5] = new P4Vector(1, -1, 1, 1);\n",
        "  points[6] = new P4Vector(1, 1, 1, 1);\n",
        "  points[7] = new P4Vector(-1, 1, 1, 1);\n",
        "  points[8] = new P4Vector(-1, -1, -1, -1);\n",
        "  points[9] = new P4Vector(1, -1, -1, -1);\n",
        "  points[10] = new P4Vector(1, 1, -1, -1);\n",
        "  points[11] = new P4Vector(-1, 1, -1, -1);\n",
        "  points[12] = new P4Vector(-1, -1, 1, -1);\n",
        "  points[13] = new P4Vector(1, -1, 1, -1);\n",
        "  points[14] = new P4Vector(1, 1, 1, -1);\n",
        "  points[15] = new P4Vector(-1, 1, 1, -1);\n",
        "}\n",
        "\n",
        "function draw() {\n",
        "  background(0);\n",
        "  rotateX(-PI / 2);\n",
        "\n",
        "  let projected3d = [];\n",
        "\n",
        "  for (let i = 0; i < points.length; i++) {\n",
        "    let v = points[i];\n",
        "\n",
        "    let rotationXY = [\n",
        "      [cos(angle), -sin(angle), 0, 0],\n",
        "      [sin(angle), cos(angle), 0, 0],\n",
        "      [0, 0, 1, 0],\n",
        "      [0, 0, 0, 1]\n",
        "    ];\n",
        "\n",
        "    let rotationZW = [\n",
        "      [1, 0, 0, 0],\n",
        "      [0, 1, 0, 0],\n",
        "      [0, 0, cos(angle), -sin(angle)],\n",
        "      [0, 0, sin(angle), cos(angle)]\n",
        "    ];\n",
        "\n",
        "    let rotated = matmul(rotationXY, v);\n",
        "    rotated = matmul(rotationZW, rotated);\n",
        "\n",
        "    let distance = 2;\n",
        "    let w = 1 / (distance - rotated.w);\n",
        "\n",
        "    let projection = [\n",
        "      [w, 0, 0, 0],\n",
        "      [0, w, 0, 0],\n",
        "      [0, 0, w, 0]\n",
        "    ];\n",
        "\n",
        "    let projected = matmul(projection, rotated);\n",
        "    projected.mult(width / 8);\n",
        "    projected3d[i] = projected;\n",
        "\n",
        "    stroke(255, 200);\n",
        "    strokeWeight(8);\n",
        "    noFill();\n",
        "    point(projected.x, projected.y, projected.z);\n",
        "  }\n",
        "\n",
        "  // Connect edges\n",
        "  for (let i = 0; i < 4; i++) {\n",
        "    connect(0, i, (i + 1) % 4, projected3d);\n",
        "    connect(0, i + 4, ((i + 1) % 4) + 4, projected3d);\n",
        "    connect(0, i, i + 4, projected3d);\n",
        "  }\n",
        "\n",
        "  for (let i = 0; i < 4; i++) {\n",
        "    connect(8, i, (i + 1) % 4, projected3d);\n",
        "    connect(8, i + 4, ((i + 1) % 4) + 4, projected3d);\n",
        "    connect(8, i, i + 4, projected3d);\n",
        "  }\n",
        "\n",
        "  for (let i = 0; i < 8; i++) {\n",
        "    connect(0, i, i + 8, projected3d);\n",
        "  }\n",
        "\n",
        "  angle += 0.02;\n",
        "}\n",
        "\n",
        "// Function to connect edges\n",
        "function connect(offset, i, j, points) {\n",
        "  strokeWeight(2);\n",
        "  stroke(255);\n",
        "  let a = points[i + offset];\n",
        "  let b = points[j + offset];\n",
        "  line(a.x, a.y, a.z, b.x, b.y, b.z);\n",
        "}\n",
        "\n",
        "// P4Vector class for 4D points\n",
        "class P4Vector {\n",
        "  constructor(x, y, z, w) {\n",
        "    this.x = x || 0;\n",
        "    this.y = y || 0;\n",
        "    this.z = z || 0;\n",
        "    this.w = w || 0;\n",
        "  }\n",
        "\n",
        "  mult(f) {\n",
        "    this.x *= f;\n",
        "    this.y *= f;\n",
        "    this.z *= f;\n",
        "    this.w *= f;\n",
        "  }\n",
        "}\n",
        "\n",
        "// Matrix multiplication function (Fixed Version)\n",
        "function matmul(a, b) {\n",
        "  let result = new P4Vector();\n",
        "  result.x = a[0][0] * b.x + a[0][1] * b.y + a[0][2] * b.z + a[0][3] * b.w;\n",
        "  result.y = a[1][0] * b.x + a[1][1] * b.y + a[1][2] * b.z + a[1][3] * b.w;\n",
        "  result.z = a[2][0] * b.x + a[2][1] * b.y + a[2][2] * b.z + a[2][3] * b.w;\n",
        "  if (a.length > 3) {\n",
        "    result.w = a[3][0] * b.x + a[3][1] * b.y + a[3][2] * b.z + a[3][3] * b.w;\n",
        "  }\n",
        "  return result;\n",
        "}"
      ],
      "metadata": {
        "id": "rGlPca2F0x6i"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "let angle = 0;\n",
        "let points = [];\n",
        "\n",
        "function setup() {\n",
        "  let size = min(windowWidth, windowHeight);\n",
        "  createCanvas(size, size, WEBGL);\n",
        "\n",
        "  // Define 4D hypercube points in [-1, 1] space\n",
        "  points[0] = new P4Vector(-1, -1, -1, 1);\n",
        "  points[1] = new P4Vector(1, -1, -1, 1);\n",
        "  points[2] = new P4Vector(1, 1, -1, 1);\n",
        "  points[3] = new P4Vector(-1, 1, -1, 1);\n",
        "  points[4] = new P4Vector(-1, -1, 1, 1);\n",
        "  points[5] = new P4Vector(1, -1, 1, 1);\n",
        "  points[6] = new P4Vector(1, 1, 1, 1);\n",
        "  points[7] = new P4Vector(-1, 1, 1, 1);\n",
        "  points[8] = new P4Vector(-1, -1, -1, -1);\n",
        "  points[9] = new P4Vector(1, -1, -1, -1);\n",
        "  points[10] = new P4Vector(1, 1, -1, -1);\n",
        "  points[11] = new P4Vector(-1, 1, -1, -1);\n",
        "  points[12] = new P4Vector(-1, -1, 1, -1);\n",
        "  points[13] = new P4Vector(1, -1, 1, -1);\n",
        "  points[14] = new P4Vector(1, 1, 1, -1);\n",
        "  points[15] = new P4Vector(-1, 1, 1, -1);\n",
        "}\n",
        "\n",
        "function draw() {\n",
        "  background(0);\n",
        "  rotateX(-PI / 2);\n",
        "\n",
        "  let projected3d = [];\n",
        "  let zoom = 0.4\n",
        "\n",
        "  for (let i = 0; i < points.length; i++) {\n",
        "    let v = points[i];\n",
        "\n",
        "    let rotationXY = [\n",
        "      [cos(angle), -sin(angle), 0, 0],\n",
        "      [sin(angle), cos(angle), 0, 0],\n",
        "      [0, 0, 1, 0],\n",
        "      [0, 0, 0, 1]\n",
        "    ];\n",
        "\n",
        "    let rotationZW = [\n",
        "      [1, 0, 0, 0],\n",
        "      [0, 1, 0, 0],\n",
        "      [0, 0, cos(angle), -sin(angle)],\n",
        "      [0, 0, sin(angle), cos(angle)]\n",
        "    ];\n",
        "\n",
        "    let rotated = matmul(rotationXY, v);\n",
        "    rotated = matmul(rotationZW, rotated);\n",
        "\n",
        "    let distance = 2;\n",
        "    let w = 1 / (distance - rotated.w);\n",
        "\n",
        "    let projection = [\n",
        "      [w, 0, 0, 0],\n",
        "      [0, w, 0, 0],\n",
        "      [0, 0, w, 0]\n",
        "    ];\n",
        "\n",
        "    let projected = matmul(projection, rotated);\n",
        "\n",
        "    // Normalise from [-1, 1] to [0, 1]\n",
        "    projected.x = (projected.x + 1) / 2;\n",
        "    projected.y = (projected.y + 1) / 2;\n",
        "    projected.z = (projected.z + 1) / 2;\n",
        "\n",
        "    // Apply zoom and scale to canvas\n",
        "    projected.x *= width * zoom;\n",
        "    projected.y *= height * zoom;\n",
        "    projected.z *= width * zoom;\n",
        "\n",
        "    projected3d[i] = projected;\n",
        "\n",
        "    stroke(255, 200);\n",
        "    strokeWeight(8);\n",
        "    noFill();\n",
        "    point(projected.x, projected.y, projected.z);\n",
        "  }\n",
        "\n",
        "  // Connect edges\n",
        "  for (let i = 0; i < 4; i++) {\n",
        "    connect(0, i, (i + 1) % 4, projected3d);\n",
        "    connect(0, i + 4, ((i + 1) % 4) + 4, projected3d);\n",
        "    connect(0, i, i + 4, projected3d);\n",
        "  }\n",
        "\n",
        "  for (let i = 0; i < 4; i++) {\n",
        "    connect(8, i, (i + 1) % 4, projected3d);\n",
        "    connect(8, i + 4, ((i + 1) % 4) + 4, projected3d);\n",
        "    connect(8, i, i + 4, projected3d);\n",
        "  }\n",
        "\n",
        "  for (let i = 0; i < 8; i++) {\n",
        "    connect(0, i, i + 8, projected3d);\n",
        "  }\n",
        "\n",
        "  angle += 0.02;\n",
        "}\n",
        "\n",
        "// Connect edges between points\n",
        "function connect(offset, i, j, points) {\n",
        "  strokeWeight(2);\n",
        "  stroke(255);\n",
        "  let a = points[i + offset];\n",
        "  let b = points[j + offset];\n",
        "  line(a.x, a.y, a.z, b.x, b.y, b.z);\n",
        "}\n",
        "\n",
        "// 4D vector class\n",
        "class P4Vector {\n",
        "  constructor(x, y, z, w) {\n",
        "    this.x = x || 0;\n",
        "    this.y = y || 0;\n",
        "    this.z = z || 0;\n",
        "    this.w = w || 0;\n",
        "  }\n",
        "\n",
        "  mult(f) {\n",
        "    this.x *= f;\n",
        "    this.y *= f;\n",
        "    this.z *= f;\n",
        "    this.w *= f;\n",
        "  }\n",
        "}\n",
        "\n",
        "// Matrix multiplication\n",
        "function matmul(a, b) {\n",
        "  let result = new P4Vector();\n",
        "  result.x = a[0][0] * b.x + a[0][1] * b.y + a[0][2] * b.z + a[0][3] * b.w;\n",
        "  result.y = a[1][0] * b.x + a[1][1] * b.y + a[1][2] * b.z + a[1][3] * b.w;\n",
        "  result.z = a[2][0] * b.x + a[2][1] * b.y + a[2][2] * b.z + a[2][3] * b.w;\n",
        "  if (a.length > 3) {\n",
        "    result.w = a[3][0] * b.x + a[3][1] * b.y + a[3][2] * b.z + a[3][3] * b.w;\n",
        "  }\n",
        "  return result;\n",
        "}"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 105
        },
        "id": "uK9pG-MkaCj8",
        "outputId": "3d7d0272-5068-4d38-a1be-e93f47516535"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "invalid decimal literal (<ipython-input-1-9e92d04ad8d8>, line 8)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-1-9e92d04ad8d8>\"\u001b[0;36m, line \u001b[0;32m8\u001b[0m\n\u001b[0;31m    // Define 4D hypercube points in [-1, 1] space\u001b[0m\n\u001b[0m              ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid decimal literal\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "let angle = 0;\n",
        "let points = [];\n",
        "\n",
        "function setup() {\n",
        "  let size = min(windowWidth, windowHeight);\n",
        "  createCanvas(size, size, WEBGL);\n",
        "\n",
        "  // Define 4D hypercube points in [-1, 1] space\n",
        "  points[0] = new P4Vector(-1, -1, -1, 1);\n",
        "  points[1] = new P4Vector(1, -1, -1, 1);\n",
        "  points[2] = new P4Vector(1, 1, -1, 1);\n",
        "  points[3] = new P4Vector(-1, 1, -1, 1);\n",
        "  points[4] = new P4Vector(-1, -1, 1, 1);\n",
        "  points[5] = new P4Vector(1, -1, 1, 1);\n",
        "  points[6] = new P4Vector(1, 1, 1, 1);\n",
        "  points[7] = new P4Vector(-1, 1, 1, 1);\n",
        "  points[8] = new P4Vector(-1, -1, -1, -1);\n",
        "  points[9] = new P4Vector(1, -1, -1, -1);\n",
        "  points[10] = new P4Vector(1, 1, -1, -1);\n",
        "  points[11] = new P4Vector(-1, 1, -1, -1);\n",
        "  points[12] = new P4Vector(-1, -1, 1, -1);\n",
        "  points[13] = new P4Vector(1, -1, 1, -1);\n",
        "  points[14] = new P4Vector(1, 1, 1, -1);\n",
        "  points[15] = new P4Vector(-1, 1, 1, -1);\n",
        "}\n",
        "\n",
        "function draw() {\n",
        "  background(0);\n",
        "  rotateX(-PI / 2);\n",
        "\n",
        "  let projected3d = [];\n",
        "  let zoom = 0.4;\n",
        "\n",
        "  for (let i = 0; i < points.length; i++) {\n",
        "    let v = points[i];\n",
        "\n",
        "    let rotationXY = [\n",
        "      [cos(angle), -sin(angle), 0, 0],\n",
        "      [sin(angle), cos(angle), 0, 0],\n",
        "      [0, 0, 1, 0],\n",
        "      [0, 0, 0, 1]\n",
        "    ];\n",
        "\n",
        "    let rotationZW = [\n",
        "      [1, 0, 0, 0],\n",
        "      [0, 1, 0, 0],\n",
        "      [0, 0, cos(angle), -sin(angle)],\n",
        "      [0, 0, sin(angle), cos(angle)]\n",
        "    ];\n",
        "\n",
        "    let rotated = matmul(rotationXY, v);\n",
        "    rotated = matmul(rotationZW, rotated);\n",
        "\n",
        "    let distance = 2;\n",
        "    let w = 1 / (distance - rotated.w);\n",
        "\n",
        "    let projection = [\n",
        "      [w, 0, 0, 0],\n",
        "      [0, w, 0, 0],\n",
        "      [0, 0, w, 0]\n",
        "    ];\n",
        "\n",
        "    let projected = matmul(projection, rotated);\n",
        "\n",
        "    // Normalize [-1,1] to [0,1]\n",
        "    projected.x = (projected.x + 1) / 2;\n",
        "    projected.y = (projected.y + 1) / 2;\n",
        "    projected.z = (projected.z + 1) / 2;\n",
        "\n",
        "    // Scale to canvas with zoom\n",
        "    projected.x *= width * zoom;\n",
        "    projected.y *= height * zoom;\n",
        "    projected.z *= width * zoom;\n",
        "\n",
        "    projected3d[i] = projected;\n",
        "\n",
        "    stroke(255, 200);\n",
        "    strokeWeight(8);\n",
        "    noFill();\n",
        "    point(projected.x, projected.y, projected.z);\n",
        "  }\n",
        "\n",
        "  // Connect edges\n",
        "  for (let i = 0; i < 4; i++) {\n",
        "    connect(0, i, (i + 1) % 4, projected3d);\n",
        "    connect(0, i + 4, ((i + 1) % 4) + 4, projected3d);\n",
        "    connect(0, i, i + 4, projected3d);\n",
        "  }\n",
        "\n",
        "  for (let i = 0; i < 4; i++) {\n",
        "    connect(8, i, (i + 1) % 4, projected3d);\n",
        "    connect(8, i + 4, ((i + 1) % 4) + 4, projected3d);\n",
        "    connect(8, i, i + 4, projected3d);\n",
        "  }\n",
        "\n",
        "  for (let i = 0; i < 8; i++) {\n",
        "    connect(0, i, i + 8, projected3d);\n",
        "  }\n",
        "\n",
        "  // Add static red points at (0,0,0) and (1,1,1)\n",
        "  let p0 = {\n",
        "    x: 0 * width * zoom,\n",
        "    y: 0 * height * zoom,\n",
        "    z: 0 * width * zoom\n",
        "  };\n",
        "\n",
        "  let p1 = {\n",
        "    x: 1 * width * zoom,\n",
        "    y: 1 * height * zoom,\n",
        "    z: 1 * width * zoom\n",
        "  };\n",
        "\n",
        "  stroke(255, 0, 0); // Red\n",
        "  strokeWeight(12);\n",
        "  point(p0.x, p0.y, p0.z);\n",
        "  point(p1.x, p1.y, p1.z);\n",
        "\n",
        "  // Add blue point at (0.87, 0.87, 0.87)\n",
        "  let p2 = {\n",
        "    x: 0.87 * width * zoom,\n",
        "    y: 0.87 * height * zoom,\n",
        "    z: 0.87 * width * zoom\n",
        "  };\n",
        "\n",
        "  stroke(0, 100, 255); // Blue\n",
        "  strokeWeight(12);\n",
        "  point(p2.x, p2.y, p2.z);\n",
        "\n",
        "  angle += 0.02;\n",
        "}\n",
        "\n",
        "// Connect edges\n",
        "function connect(offset, i, j, points) {\n",
        "  strokeWeight(2);\n",
        "  stroke(255);\n",
        "  let a = points[i + offset];\n",
        "  let b = points[j + offset];\n",
        "  line(a.x, a.y, a.z, b.x, b.y, b.z);\n",
        "}\n",
        "\n",
        "// P4Vector class for 4D points\n",
        "class P4Vector {\n",
        "  constructor(x, y, z, w) {\n",
        "    this.x = x || 0;\n",
        "    this.y = y || 0;\n",
        "    this.z = z || 0;\n",
        "    this.w = w || 0;\n",
        "  }\n",
        "\n",
        "  mult(f) {\n",
        "    this.x *= f;\n",
        "    this.y *= f;\n",
        "    this.z *= f;\n",
        "    this.w *= f;\n",
        "  }\n",
        "}\n",
        "\n",
        "// Matrix multiplication function\n",
        "function matmul(a, b) {\n",
        "  let result = new P4Vector();\n",
        "  result.x = a[0][0] * b.x + a[0][1] * b.y + a[0][2] * b.z + a[0][3] * b.w;\n",
        "  result.y = a[1][0] * b.x + a[1][1] * b.y + a[1][2] * b.z + a[1][3] * b.w;\n",
        "  result.z = a[2][0] * b.x + a[2][1] * b.y + a[2][2] * b.z + a[2][3] * b.w;\n",
        "  if (a.length > 3) {\n",
        "    result.w = a[3][0] * b.x + a[3][1] * b.y + a[3][2] * b.z + a[3][3] * b.w;\n",
        "  }\n",
        "  return result;\n",
        "}"
      ],
      "metadata": {
        "id": "Nxcz9wE3b8NF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "let angle = 0;\n",
        "let points = [];\n",
        "let prevNormalizedRotation = 0;\n",
        "\n",
        "function setup() {\n",
        "  let size = min(windowWidth, windowHeight);\n",
        "  createCanvas(size, size, WEBGL);\n",
        "\n",
        "  points = [\n",
        "    new P4Vector(-1, -1, -1, 1), new P4Vector(1, -1, -1, 1),\n",
        "    new P4Vector(1, 1, -1, 1), new P4Vector(-1, 1, -1, 1),\n",
        "    new P4Vector(-1, -1, 1, 1), new P4Vector(1, -1, 1, 1),\n",
        "    new P4Vector(1, 1, 1, 1), new P4Vector(-1, 1, 1, 1),\n",
        "    new P4Vector(-1, -1, -1, -1), new P4Vector(1, -1, -1, -1),\n",
        "    new P4Vector(1, 1, -1, -1), new P4Vector(-1, 1, -1, -1),\n",
        "    new P4Vector(-1, -1, 1, -1), new P4Vector(1, -1, 1, -1),\n",
        "    new P4Vector(1, 1, 1, -1), new P4Vector(-1, 1, 1, -1)\n",
        "  ];\n",
        "}\n",
        "\n",
        "function draw() {\n",
        "  background(0);\n",
        "  rotateX(-PI / 2);\n",
        "\n",
        "  let zoom = 0.4;\n",
        "  let scale = width * zoom;\n",
        "  let projected3d = [];\n",
        "\n",
        "  // ---- Normalized angle in range [0, 1)\n",
        "  let normalizedRotation = (angle % TWO_PI) / TWO_PI;\n",
        "  if (prevNormalizedRotation < 0.87 && normalizedRotation >= 0.87) {\n",
        "    console.log(\"🔵 Tesseract rotation just passed the 0.87 mark!\");\n",
        "  }\n",
        "  prevNormalizedRotation = normalizedRotation;\n",
        "\n",
        "  // ---- Rotate and project tesseract points ----\n",
        "  for (let i = 0; i < points.length; i++) {\n",
        "    let v = points[i];\n",
        "\n",
        "    let rotationXY = [\n",
        "      [cos(angle), -sin(angle), 0, 0],\n",
        "      [sin(angle), cos(angle), 0, 0],\n",
        "      [0, 0, 1, 0],\n",
        "      [0, 0, 0, 1]\n",
        "    ];\n",
        "\n",
        "    let rotationZW = [\n",
        "      [1, 0, 0, 0],\n",
        "      [0, 1, 0, 0],\n",
        "      [0, 0, cos(angle), -sin(angle)],\n",
        "      [0, 0, sin(angle), cos(angle)]\n",
        "    ];\n",
        "\n",
        "    let rotated = matmul(rotationXY, v);\n",
        "    rotated = matmul(rotationZW, rotated);\n",
        "\n",
        "    let distance = 2;\n",
        "    let w = 1 / (distance - rotated.w);\n",
        "\n",
        "    let projection = [\n",
        "      [w, 0, 0, 0],\n",
        "      [0, w, 0, 0],\n",
        "      [0, 0, w, 0]\n",
        "    ];\n",
        "\n",
        "    let projected = matmul(projection, rotated);\n",
        "    projected.x = (projected.x + 1) / 2 * scale;\n",
        "    projected.y = (projected.y + 1) / 2 * scale;\n",
        "    projected.z = (projected.z + 1) / 2 * scale;\n",
        "\n",
        "    projected3d[i] = projected;\n",
        "\n",
        "    stroke(255, 200);\n",
        "    strokeWeight(8);\n",
        "    point(projected.x, projected.y, projected.z);\n",
        "  }\n",
        "\n",
        "  // ---- Connect tesseract edges ----\n",
        "  for (let i = 0; i < 4; i++) {\n",
        "    connect(0, i, (i + 1) % 4, projected3d);\n",
        "    connect(0, i + 4, ((i + 1) % 4) + 4, projected3d);\n",
        "    connect(0, i, i + 4, projected3d);\n",
        "  }\n",
        "\n",
        "  for (let i = 0; i < 4; i++) {\n",
        "    connect(8, i, (i + 1) % 4, projected3d);\n",
        "    connect(8, i + 4, ((i + 1) % 4) + 4, projected3d);\n",
        "    connect(8, i, i + 4, projected3d);\n",
        "  }\n",
        "\n",
        "  for (let i = 0; i < 8; i++) {\n",
        "    connect(0, i, i + 8, projected3d);\n",
        "  }\n",
        "\n",
        "  // ---- Draw static cube [0,1]^3 ----\n",
        "  let cubeCorners = [\n",
        "    [0, 0, 0], [1, 0, 0], [1, 1, 0], [0, 1, 0],\n",
        "    [0, 0, 1], [1, 0, 1], [1, 1, 1], [0, 1, 1]\n",
        "  ];\n",
        "\n",
        "  stroke(100);\n",
        "  strokeWeight(6);\n",
        "  for (let pt of cubeCorners) {\n",
        "    point(pt[0] * scale, pt[1] * scale, pt[2] * scale);\n",
        "  }\n",
        "\n",
        "  let cubeEdges = [\n",
        "    [0,1],[1,2],[2,3],[3,0],\n",
        "    [4,5],[5,6],[6,7],[7,4],\n",
        "    [0,4],[1,5],[2,6],[3,7]\n",
        "  ];\n",
        "\n",
        "  strokeWeight(1);\n",
        "  for (let [i, j] of cubeEdges) {\n",
        "    let a = cubeCorners[i];\n",
        "    let b = cubeCorners[j];\n",
        "    line(a[0]*scale,a[1]*scale,a[2]*scale,b[0]*scale,b[1]*scale,b[2]*scale);\n",
        "  }\n",
        "\n",
        "  // ---- Highlighted points ----\n",
        "  let scaleVec = v => createVector(v[0], v[1], v[2]).mult(scale);\n",
        "  let p0 = scaleVec([0, 0, 0]);\n",
        "  let p1 = scaleVec([1, 1, 1]);\n",
        "  let p2 = scaleVec([0.87, 0.87, 0.87]);\n",
        "\n",
        "  stroke(255, 0, 0);\n",
        "  strokeWeight(12);\n",
        "  point(p0.x, p0.y, p0.z);\n",
        "  point(p1.x, p1.y, p1.z);\n",
        "\n",
        "  stroke(0, 100, 255);\n",
        "  strokeWeight(12);\n",
        "  point(p2.x, p2.y, p2.z);\n",
        "\n",
        "  // ---- Axis-aligned lines from MSNE ----\n",
        "  strokeWeight(2);\n",
        "  stroke(200, 120, 0);\n",
        "  line(0, p2.y, p2.z, scale, p2.y, p2.z);\n",
        "\n",
        "  stroke(100, 200, 200);\n",
        "  line(p2.x, 0, p2.z, p2.x, scale, p2.z);\n",
        "\n",
        "  stroke(200, 100, 200);\n",
        "  line(p2.x, p2.y, 0, p2.x, p2.y, scale);\n",
        "\n",
        "  // ---- Connect MSNE to corners ----\n",
        "  stroke(200, 120, 0);\n",
        "  line(0, 0.87 * scale, 0.87 * scale, 0, 0, 0);\n",
        "  line(scale, 0.87 * scale, 0.87 * scale, scale, scale, scale);\n",
        "\n",
        "  stroke(100, 200, 200);\n",
        "  line(0.87 * scale, 0, 0.87 * scale, 0, 0, 0);\n",
        "  line(0.87 * scale, scale, 0.87 * scale, scale, scale, scale);\n",
        "\n",
        "  stroke(200, 100, 200);\n",
        "  line(0.87 * scale, 0.87 * scale, 0, 0, 0, 0);\n",
        "  line(0.87 * scale, 0.87 * scale, scale, scale, scale, scale);\n",
        "\n",
        "  angle += 0.02;\n",
        "}\n",
        "\n",
        "function connect(offset, i, j, pts) {\n",
        "  strokeWeight(2);\n",
        "  stroke(255);\n",
        "  let a = pts[i + offset], b = pts[j + offset];\n",
        "  line(a.x, a.y, a.z, b.x, b.y, b.z);\n",
        "}\n",
        "\n",
        "class P4Vector {\n",
        "  constructor(x, y, z, w) {\n",
        "    this.x = x || 0; this.y = y || 0;\n",
        "    this.z = z || 0; this.w = w || 0;\n",
        "  }\n",
        "  mult(f) {\n",
        "    this.x *= f; this.y *= f;\n",
        "    this.z *= f; this.w *= f;\n",
        "  }\n",
        "}\n",
        "\n",
        "function matmul(a, b) {\n",
        "  return new P4Vector(\n",
        "    a[0][0]*b.x + a[0][1]*b.y + a[0][2]*b.z + a[0][3]*b.w,\n",
        "    a[1][0]*b.x + a[1][1]*b.y + a[1][2]*b.z + a[1][3]*b.w,\n",
        "    a[2][0]*b.x + a[2][1]*b.y + a[2][2]*b.z + a[2][3]*b.w,\n",
        "    a.length > 3 ? a[3][0]*b.x + a[3][1]*b.y + a[3][2]*b.z + a[3][3]*b.w : 0\n",
        "  );\n",
        "}\n",
        "}"
      ],
      "metadata": {
        "id": "Bw__enq39ROR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "let angle = 0;\n",
        "let points = [];\n",
        "\n",
        "function setup() {\n",
        "  let canvasSize = min(windowWidth, windowHeight);\n",
        "  createCanvas(canvasSize, canvasSize, WEBGL);\n",
        "}\n",
        "\n",
        "function draw() {\n",
        "  background(0);\n",
        "  rotateX(-PI / 2);\n",
        "\n",
        "  let zoom = 0.4;\n",
        "  let unit = width * zoom;\n",
        "  let projected3d = [];\n",
        "\n",
        "  let normalizedRotation = (angle % TWO_PI) / TWO_PI;\n",
        "\n",
        "  if (points.length === 0) {\n",
        "    points = [\n",
        "      new P4Vector(-1, -1, -1, 1), new P4Vector(1, -1, -1, 1),\n",
        "      new P4Vector(1, 1, -1, 1), new P4Vector(-1, 1, -1, 1),\n",
        "      new P4Vector(-1, -1, 1, 1), new P4Vector(1, -1, 1, 1),\n",
        "      new P4Vector(1, 1, 1, 1), new P4Vector(-1, 1, 1, 1),\n",
        "      new P4Vector(-1, -1, -1, -1), new P4Vector(1, -1, -1, -1),\n",
        "      new P4Vector(1, 1, -1, -1), new P4Vector(-1, 1, -1, -1),\n",
        "      new P4Vector(-1, -1, 1, -1), new P4Vector(1, -1, 1, -1),\n",
        "      new P4Vector(1, 1, 1, -1), new P4Vector(-1, 1, 1, -1)\n",
        "    ];\n",
        "  }\n",
        "\n",
        "  for (let i = 0; i < points.length; i++) {\n",
        "    let v = points[i];\n",
        "    let rotationXY = [\n",
        "      [cos(angle), -sin(angle), 0, 0],\n",
        "      [sin(angle), cos(angle), 0, 0],\n",
        "      [0, 0, 1, 0],\n",
        "      [0, 0, 0, 1]\n",
        "    ];\n",
        "    let rotationZW = [\n",
        "      [1, 0, 0, 0],\n",
        "      [0, 1, 0, 0],\n",
        "      [0, 0, cos(angle), -sin(angle)],\n",
        "      [0, 0, sin(angle), cos(angle)]\n",
        "    ];\n",
        "    let rotated = matmul(rotationXY, v);\n",
        "    rotated = matmul(rotationZW, rotated);\n",
        "    let distance = 2;\n",
        "    let w = 1 / (distance - rotated.w);\n",
        "    let projection = [\n",
        "      [w, 0, 0, 0],\n",
        "      [0, w, 0, 0],\n",
        "      [0, 0, w, 0]\n",
        "    ];\n",
        "    let projected = matmul(projection, rotated);\n",
        "    projected.x = (projected.x + 1) / 2 * unit;\n",
        "    projected.y = (projected.y + 1) / 2 * unit;\n",
        "    projected.z = (projected.z + 1) / 2 * unit;\n",
        "    projected3d[i] = projected;\n",
        "\n",
        "    stroke(255, 200);\n",
        "    strokeWeight(8);\n",
        "    point(projected.x, projected.y, projected.z);\n",
        "  }\n",
        "\n",
        "  for (let i = 0; i < 4; i++) {\n",
        "    connect(0, i, (i + 1) % 4, projected3d);\n",
        "    connect(0, i + 4, ((i + 1) % 4) + 4, projected3d);\n",
        "    connect(0, i, i + 4, projected3d);\n",
        "  }\n",
        "\n",
        "  for (let i = 0; i < 4; i++) {\n",
        "    connect(8, i, (i + 1) % 4, projected3d);\n",
        "    connect(8, i + 4, ((i + 1) % 4) + 4, projected3d);\n",
        "    connect(8, i, i + 4, projected3d);\n",
        "  }\n",
        "\n",
        "  for (let i = 0; i < 8; i++) {\n",
        "    connect(0, i, i + 8, projected3d);\n",
        "  }\n",
        "\n",
        "  // Static cube\n",
        "  let cubeCorners = [\n",
        "    [0, 0, 0], [1, 0, 0], [1, 1, 0], [0, 1, 0],\n",
        "    [0, 0, 1], [1, 0, 1], [1, 1, 1], [0, 1, 1]\n",
        "  ];\n",
        "  let cubeEdges = [\n",
        "    [0,1],[1,2],[2,3],[3,0],\n",
        "    [4,5],[5,6],[6,7],[7,4],\n",
        "    [0,4],[1,5],[2,6],[3,7]\n",
        "  ];\n",
        "\n",
        "  stroke(100);\n",
        "  strokeWeight(6);\n",
        "  for (let pt of cubeCorners) {\n",
        "    point(pt[0] * unit, pt[1] * unit, pt[2] * unit);\n",
        "  }\n",
        "\n",
        "  strokeWeight(1);\n",
        "  for (let [i, j] of cubeEdges) {\n",
        "    let a = cubeCorners[i];\n",
        "    let b = cubeCorners[j];\n",
        "    line(a[0]*unit,a[1]*unit,a[2]*unit,b[0]*unit,b[1]*unit,b[2]*unit);\n",
        "  }\n",
        "\n",
        "  // Points\n",
        "  let scaleVec = v => createVector(v[0], v[1], v[2]).mult(unit);\n",
        "  let p0 = scaleVec([0, 0, 0]);\n",
        "  let p1 = scaleVec([1, 1, 1]);\n",
        "  let p2 = scaleVec([0.87, 0.87, 0.87]);\n",
        "\n",
        "  stroke(255, 0, 0); strokeWeight(12);\n",
        "  point(p0.x, p0.y, p0.z); point(p1.x, p1.y, p1.z);\n",
        "  stroke(0, 100, 255); strokeWeight(12); point(p2.x, p2.y, p2.z);\n",
        "\n",
        "  // Axes and connectors\n",
        "  strokeWeight(2);\n",
        "  stroke(200, 120, 0);  // Orange X-axis\n",
        "  line(0, p2.y, p2.z, unit, p2.y, p2.z);          // Axis\n",
        "  line(p1.x, p1.y, p1.z, p2.x, p2.y, p2.z);       // to max\n",
        "  line(p2.x, p2.y, p2.z, p0.x, p0.y, p0.z);       // to min\n",
        "\n",
        "  stroke(100, 200, 200);  // Cyan Y-axis\n",
        "  line(p2.x, 0, p2.z, p2.x, unit, p2.z);          // Axis\n",
        "  line(p2.x, p2.y, p2.z, p0.x, p0.y, p0.z);       // to min\n",
        "  line(p1.x, p1.y, p1.z, p2.x, p2.y, p2.z);       // to max\n",
        "\n",
        "  stroke(200, 100, 200);  // Magenta Z-axis\n",
        "  line(p2.x, p2.y, 0, p2.x, p2.y, unit);          // Axis\n",
        "  line(p0.x, p0.y, p0.z, p2.x, p2.y, p2.z);       // to min\n",
        "  line(p1.x, p1.y, p1.z, p2.x, p2.y, p2.z);       // to max\n",
        "\n",
        "  // Yellow glow at rotation ≈ 0.87\n",
        "  if (normalizedRotation >= 0.85 && normalizedRotation <= 0.89) {\n",
        "    push();\n",
        "    translate(p2.x, p2.y, p2.z + 10);\n",
        "    noStroke();\n",
        "    fill(255, 255, 0);\n",
        "    sphere(25);\n",
        "    pop();\n",
        "  }\n",
        "\n",
        "  angle += 0.005;\n",
        "}\n",
        "\n",
        "function connect(offset, i, j, pts) {\n",
        "  strokeWeight(2);\n",
        "  stroke(255);\n",
        "  let a = pts[i + offset], b = pts[j + offset];\n",
        "  line(a.x, a.y, a.z, b.x, b.y, b.z);\n",
        "}\n",
        "\n",
        "class P4Vector {\n",
        "  constructor(x, y, z, w) {\n",
        "    this.x = x || 0; this.y = y || 0;\n",
        "    this.z = z || 0; this.w = w || 0;\n",
        "  }\n",
        "  mult(f) {\n",
        "    this.x *= f; this.y *= f;\n",
        "    this.z *= f; this.w *= f;\n",
        "  }\n",
        "}\n",
        "\n",
        "function matmul(a, b) {\n",
        "  return new P4Vector(\n",
        "    a[0][0]*b.x + a[0][1]*b.y + a[0][2]*b.z + a[0][3]*b.w,\n",
        "    a[1][0]*b.x + a[1][1]*b.y + a[1][2]*b.z + a[1][3]*b.w,\n",
        "    a[2][0]*b.x + a[2][1]*b.y + a[2][2]*b.z + a[2][3]*b.w,\n",
        "    a.length > 3 ? a[3][0]*b.x + a[3][1]*b.y + a[3][2]*b.z + a[3][3]*b.w : 0\n",
        "  );\n",
        "}"
      ],
      "metadata": {
        "id": "3NTDr1aZ0ubK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "let angle = 0;\n",
        "let points = [];\n",
        "\n",
        "function setup() {\n",
        "  let size = min(windowWidth, windowHeight);\n",
        "  createCanvas(size, size, WEBGL);\n",
        "\n",
        "  // Define 4D hypercube points in [-1, 1] space\n",
        "  points[0] = new P4Vector(-1, -1, -1, 1);\n",
        "  points[1] = new P4Vector(1, -1, -1, 1);\n",
        "  points[2] = new P4Vector(1, 1, -1, 1);\n",
        "  points[3] = new P4Vector(-1, 1, -1, 1);\n",
        "  points[4] = new P4Vector(-1, -1, 1, 1);\n",
        "  points[5] = new P4Vector(1, -1, 1, 1);\n",
        "  points[6] = new P4Vector(1, 1, 1, 1);\n",
        "  points[7] = new P4Vector(-1, 1, 1, 1);\n",
        "  points[8] = new P4Vector(-1, -1, -1, -1);\n",
        "  points[9] = new P4Vector(1, -1, -1, -1);\n",
        "  points[10] = new P4Vector(1, 1, -1, -1);\n",
        "  points[11] = new P4Vector(-1, 1, -1, -1);\n",
        "  points[12] = new P4Vector(-1, -1, 1, -1);\n",
        "  points[13] = new P4Vector(1, -1, 1, -1);\n",
        "  points[14] = new P4Vector(1, 1, 1, -1);\n",
        "  points[15] = new P4Vector(-1, 1, 1, -1);\n",
        "}\n",
        "\n",
        "function draw() {\n",
        "  background(0);\n",
        "  rotateX(-PI / 2);\n",
        "\n",
        "  let zoom = 0.4;\n",
        "  let projected3d = [];\n",
        "\n",
        "  // Rotate and project tesseract points\n",
        "  for (let i = 0; i < points.length; i++) {\n",
        "    let v = points[i];\n",
        "\n",
        "    let rotationXY = [\n",
        "      [cos(angle), -sin(angle), 0, 0],\n",
        "      [sin(angle), cos(angle), 0, 0],\n",
        "      [0, 0, 1, 0],\n",
        "      [0, 0, 0, 1]\n",
        "    ];\n",
        "\n",
        "    let rotationZW = [\n",
        "      [1, 0, 0, 0],\n",
        "      [0, 1, 0, 0],\n",
        "      [0, 0, cos(angle), -sin(angle)],\n",
        "      [0, 0, sin(angle), cos(angle)]\n",
        "    ];\n",
        "\n",
        "    let rotated = matmul(rotationXY, v);\n",
        "    rotated = matmul(rotationZW, rotated);\n",
        "\n",
        "    let distance = 2;\n",
        "    let w = 1 / (distance - rotated.w);\n",
        "\n",
        "    let projection = [\n",
        "      [w, 0, 0, 0],\n",
        "      [0, w, 0, 0],\n",
        "      [0, 0, w, 0]\n",
        "    ];\n",
        "\n",
        "    let projected = matmul(projection, rotated);\n",
        "\n",
        "    // Normalize [-1,1] to [0,1]\n",
        "    projected.x = (projected.x + 1) / 2;\n",
        "    projected.y = (projected.y + 1) / 2;\n",
        "    projected.z = (projected.z + 1) / 2;\n",
        "\n",
        "    // Scale to canvas with zoom\n",
        "    projected.x *= width * zoom;\n",
        "    projected.y *= height * zoom;\n",
        "    projected.z *= width * zoom;\n",
        "\n",
        "    projected3d[i] = projected;\n",
        "\n",
        "    stroke(255, 200);\n",
        "    strokeWeight(8);\n",
        "    noFill();\n",
        "    point(projected.x, projected.y, projected.z);\n",
        "  }\n",
        "\n",
        "  // Connect tesseract edges\n",
        "  for (let i = 0; i < 4; i++) {\n",
        "    connect(0, i, (i + 1) % 4, projected3d);\n",
        "    connect(0, i + 4, ((i + 1) % 4) + 4, projected3d);\n",
        "    connect(0, i, i + 4, projected3d);\n",
        "  }\n",
        "\n",
        "  for (let i = 0; i < 4; i++) {\n",
        "    connect(8, i, (i + 1) % 4, projected3d);\n",
        "    connect(8, i + 4, ((i + 1) % 4) + 4, projected3d);\n",
        "    connect(8, i, i + 4, projected3d);\n",
        "  }\n",
        "\n",
        "  for (let i = 0; i < 8; i++) {\n",
        "    connect(0, i, i + 8, projected3d);\n",
        "  }\n",
        "\n",
        "  // Static cube [0,1]^3\n",
        "  let cubeCorners = [\n",
        "    [0, 0, 0], [1, 0, 0], [1, 1, 0], [0, 1, 0],\n",
        "    [0, 0, 1], [1, 0, 1], [1, 1, 1], [0, 1, 1]\n",
        "  ];\n",
        "\n",
        "  stroke(100);\n",
        "  strokeWeight(6);\n",
        "  for (let pt of cubeCorners) {\n",
        "    point(pt[0] * width * zoom, pt[1] * height * zoom, pt[2] * width * zoom);\n",
        "  }\n",
        "\n",
        "  let cubeEdges = [\n",
        "    [0,1],[1,2],[2,3],[3,0],\n",
        "    [4,5],[5,6],[6,7],[7,4],\n",
        "    [0,4],[1,5],[2,6],[3,7]\n",
        "  ];\n",
        "\n",
        "  strokeWeight(1);\n",
        "  for (let [i, j] of cubeEdges) {\n",
        "    let a = cubeCorners[i];\n",
        "    let b = cubeCorners[j];\n",
        "    line(a[0] * width * zoom, a[1] * height * zoom, a[2] * width * zoom,\n",
        "         b[0] * width * zoom, b[1] * height * zoom, b[2] * width * zoom);\n",
        "  }\n",
        "\n",
        "  // Highlighted points\n",
        "  let p0 = { x: 0 * width * zoom, y: 0 * height * zoom, z: 0 * width * zoom };\n",
        "  let p1 = { x: 1 * width * zoom, y: 1 * height * zoom, z: 1 * width * zoom };\n",
        "  let p2 = { x: 0.87 * width * zoom, y: 0.87 * height * zoom, z: 0.87 * width * zoom };\n",
        "\n",
        "  // Red points\n",
        "  stroke(255, 0, 0);\n",
        "  strokeWeight(12);\n",
        "  point(p0.x, p0.y, p0.z);\n",
        "  point(p1.x, p1.y, p1.z);\n",
        "\n",
        "  // Blue point\n",
        "  stroke(0, 100, 255);\n",
        "  strokeWeight(12);\n",
        "  point(p2.x, p2.y, p2.z);\n",
        "\n",
        "  // Axis-aligned lines through blue dot\n",
        "  strokeWeight(2);\n",
        "  stroke(200, 120, 0);\n",
        "  line(0, p2.y, p2.z, width * zoom, p2.y, p2.z);\n",
        "  stroke(100, 200, 200);\n",
        "  line(p2.x, 0, p2.z, p2.x, height * zoom, p2.z);\n",
        "  stroke(200, 100, 200);\n",
        "  line(p2.x, p2.y, 0, p2.x, p2.y, width * zoom);\n",
        "\n",
        "  angle += 0.02;\n",
        "}\n",
        "\n",
        "// Connect edges of tesseract\n",
        "function connect(offset, i, j, points) {\n",
        "  stroke(255);\n",
        "  strokeWeight(2);\n",
        "  let a = points[i + offset];\n",
        "  let b = points[j + offset];\n",
        "  line(a.x, a.y, a.z, b.x, b.y, b.z);\n",
        "}\n",
        "\n",
        "// 4D vector class\n",
        "class P4Vector {\n",
        "  constructor(x, y, z, w) {\n",
        "    this.x = x || 0;\n",
        "    this.y = y || 0;\n",
        "    this.z = z || 0;\n",
        "    this.w = w || 0;\n",
        "  }\n",
        "\n",
        "  mult(f) {\n",
        "    this.x *= f;\n",
        "    this.y *= f;\n",
        "    this.z *= f;\n",
        "    this.w *= f;\n",
        "  }\n",
        "}\n",
        "\n",
        "// Matrix multiplication\n",
        "function matmul(a, b) {\n",
        "  let result = new P4Vector();\n",
        "  result.x = a[0][0] * b.x + a[0][1] * b.y + a[0][2] * b.z + a[0][3] * b.w;\n",
        "  result.y = a[1][0] * b.x + a[1][1] * b.y + a[1][2] * b.z + a[1][3] * b.w;\n",
        "  result.z = a[2][0] * b.x + a[2][1] * b.y + a[2][2] * b.z + a[2][3] * b.w;\n",
        "  if (a.length > 3) {\n",
        "    result.w = a[3][0] * b.x + a[3][1] * b.y + a[3][2] * b.z + a[3][3] * b.w;\n",
        "  }\n",
        "  return result;\n",
        "}"
      ],
      "metadata": {
        "id": "ktETUbgjetaB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "let angle = 0;\n",
        "let points = [];\n",
        "\n",
        "function setup() {\n",
        "  let size = min(windowWidth, windowHeight);\n",
        "  createCanvas(size, size, WEBGL);\n",
        "\n",
        "  // Define 4D hypercube points in [-1, 1] space\n",
        "  points[0] = new P4Vector(-1, -1, -1, 1);\n",
        "  points[1] = new P4Vector(1, -1, -1, 1);\n",
        "  points[2] = new P4Vector(1, 1, -1, 1);\n",
        "  points[3] = new P4Vector(-1, 1, -1, 1);\n",
        "  points[4] = new P4Vector(-1, -1, 1, 1);\n",
        "  points[5] = new P4Vector(1, -1, 1, 1);\n",
        "  points[6] = new P4Vector(1, 1, 1, 1);\n",
        "  points[7] = new P4Vector(-1, 1, 1, 1);\n",
        "  points[8] = new P4Vector(-1, -1, -1, -1);\n",
        "  points[9] = new P4Vector(1, -1, -1, -1);\n",
        "  points[10] = new P4Vector(1, 1, -1, -1);\n",
        "  points[11] = new P4Vector(-1, 1, -1, -1);\n",
        "  points[12] = new P4Vector(-1, -1, 1, -1);\n",
        "  points[13] = new P4Vector(1, -1, 1, -1);\n",
        "  points[14] = new P4Vector(1, 1, 1, -1);\n",
        "  points[15] = new P4Vector(-1, 1, 1, -1);\n",
        "}\n",
        "\n",
        "function draw() {\n",
        "  background(0);\n",
        "  rotateX(-PI / 2);\n",
        "\n",
        "  let zoom = 0.4;\n",
        "  let scale = width * zoom;\n",
        "  let projected3d = [];\n",
        "\n",
        "  // ---- Rotate and project tesseract points ----\n",
        "  for (let i = 0; i < points.length; i++) {\n",
        "    let v = points[i];\n",
        "\n",
        "    let rotationXY = [\n",
        "      [cos(angle), -sin(angle), 0, 0],\n",
        "      [sin(angle), cos(angle), 0, 0],\n",
        "      [0, 0, 1, 0],\n",
        "      [0, 0, 0, 1]\n",
        "    ];\n",
        "\n",
        "    let rotationZW = [\n",
        "      [1, 0, 0, 0],\n",
        "      [0, 1, 0, 0],\n",
        "      [0, 0, cos(angle), -sin(angle)],\n",
        "      [0, 0, sin(angle), cos(angle)]\n",
        "    ];\n",
        "\n",
        "    let rotated = matmul(rotationXY, v);\n",
        "    rotated = matmul(rotationZW, rotated);\n",
        "\n",
        "    let distance = 2;\n",
        "    let w = 1 / (distance - rotated.w);\n",
        "\n",
        "    let projection = [\n",
        "      [w, 0, 0, 0],\n",
        "      [0, w, 0, 0],\n",
        "      [0, 0, w, 0]\n",
        "    ];\n",
        "\n",
        "    let projected = matmul(projection, rotated);\n",
        "\n",
        "    // Normalize [-1,1] to [0,1] and scale\n",
        "    projected.x = (projected.x + 1) / 2 * scale;\n",
        "    projected.y = (projected.y + 1) / 2 * scale;\n",
        "    projected.z = (projected.z + 1) / 2 * scale;\n",
        "\n",
        "    projected3d[i] = projected;\n",
        "\n",
        "    stroke(255, 200);\n",
        "    strokeWeight(8);\n",
        "    point(projected.x, projected.y, projected.z);\n",
        "  }\n",
        "\n",
        "  // ---- Connect tesseract edges ----\n",
        "  for (let i = 0; i < 4; i++) {\n",
        "    connect(0, i, (i + 1) % 4, projected3d);\n",
        "    connect(0, i + 4, ((i + 1) % 4) + 4, projected3d);\n",
        "    connect(0, i, i + 4, projected3d);\n",
        "  }\n",
        "\n",
        "  for (let i = 0; i < 4; i++) {\n",
        "    connect(8, i, (i + 1) % 4, projected3d);\n",
        "    connect(8, i + 4, ((i + 1) % 4) + 4, projected3d);\n",
        "    connect(8, i, i + 4, projected3d);\n",
        "  }\n",
        "\n",
        "  for (let i = 0; i < 8; i++) {\n",
        "    connect(0, i, i + 8, projected3d);\n",
        "  }\n",
        "\n",
        "  // ---- Still cube from (0,0,0) to (1,1,1) ----\n",
        "  let cubeCorners = [\n",
        "    [0, 0, 0], [1, 0, 0], [1, 1, 0], [0, 1, 0],\n",
        "    [0, 0, 1], [1, 0, 1], [1, 1, 1], [0, 1, 1]\n",
        "  ];\n",
        "\n",
        "  stroke(100); strokeWeight(6);\n",
        "  for (let pt of cubeCorners) {\n",
        "    point(pt[0] * scale, pt[1] * scale, pt[2] * scale);\n",
        "  }\n",
        "\n",
        "  let cubeEdges = [\n",
        "    [0,1],[1,2],[2,3],[3,0],\n",
        "    [4,5],[5,6],[6,7],[7,4],\n",
        "    [0,4],[1,5],[2,6],[3,7]\n",
        "  ];\n",
        "\n",
        "  strokeWeight(1);\n",
        "  for (let [i, j] of cubeEdges) {\n",
        "    let a = cubeCorners[i], b = cubeCorners[j];\n",
        "    line(a[0]*scale, a[1]*scale, a[2]*scale, b[0]*scale, b[1]*scale, b[2]*scale);\n",
        "  }\n",
        "\n",
        "  // ---- Highlighted points ----\n",
        "  let p0 = createVector(0, 0, 0).mult(scale);\n",
        "  let p1 = createVector(1, 1, 1).mult(scale);\n",
        "  let p2 = createVector(0.87, 0.87, 0.87).mult(scale);\n",
        "\n",
        "  // Red dots\n",
        "  stroke(255, 0, 0); strokeWeight(12);\n",
        "  point(p0.x, p0.y, p0.z);\n",
        "  point(p1.x, p1.y, p1.z);\n",
        "\n",
        "  // Blue dot\n",
        "  stroke(0, 100, 255);\n",
        "  point(p2.x, p2.y, p2.z);\n",
        "\n",
        "  // Axis lines through blue dot\n",
        "  strokeWeight(2);\n",
        "  stroke(200, 120, 0);\n",
        "  line(0, p2.y, p2.z, scale, p2.y, p2.z);\n",
        "  stroke(100, 200, 200);\n",
        "  line(p2.x, 0, p2.z, p2.x, scale, p2.z);\n",
        "  stroke(200, 100, 200);\n",
        "  line(p2.x, p2.y, 0, p2.x, p2.y, scale);\n",
        "\n",
        "  angle += 0.02;\n",
        "}\n",
        "\n",
        "// Connect function\n",
        "function connect(offset, i, j, points) {\n",
        "  strokeWeight(2);\n",
        "  stroke(255);\n",
        "  let a = points[i + offset];\n",
        "  let b = points[j + offset];\n",
        "  line(a.x, a.y, a.z, b.x, b.y, b.z);\n",
        "}\n",
        "\n",
        "// P4Vector class\n",
        "class P4Vector {\n",
        "  constructor(x, y, z, w) {\n",
        "    this.x = x || 0;\n",
        "    this.y = y || 0;\n",
        "    this.z = z || 0;\n",
        "    this.w = w || 0;\n",
        "  }\n",
        "  mult(f) {\n",
        "    this.x *= f;\n",
        "    this.y *= f;\n",
        "    this.z *= f;\n",
        "    this.w *= f;\n",
        "  }\n",
        "}\n",
        "\n",
        "// Matrix multiplication\n",
        "function matmul(a, b) {\n",
        "  let result = new P4Vector();\n",
        "  result.x = a[0][0]*b.x + a[0][1]*b.y + a[0][2]*b.z + a[0][3]*b.w;\n",
        "  result.y = a[1][0]*b.x + a[1][1]*b.y + a[1][2]*b.z + a[1][3]*b.w;\n",
        "  result.z = a[2][0]*b.x + a[2][1]*b.y + a[2][2]*b.z + a[2][3]*b.w;\n",
        "  if (a.length > 3) {\n",
        "    result.w = a[3][0]*b.x + a[3][1]*b.y + a[3][2]*b.z + a[3][3]*b.w;\n",
        "  }\n",
        "  return result;\n",
        "}"
      ],
      "metadata": {
        "id": "_U8kcvt1vDG8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "let angle = 0;\n",
        "let points = [];\n",
        "\n",
        "function setup() {\n",
        "  let size = min(windowWidth, windowHeight);\n",
        "  createCanvas(size, size, WEBGL);\n",
        "\n",
        "  points = [\n",
        "    new P4Vector(-1, -1, -1, 1), new P4Vector(1, -1, -1, 1),\n",
        "    new P4Vector(1, 1, -1, 1), new P4Vector(-1, 1, -1, 1),\n",
        "    new P4Vector(-1, -1, 1, 1), new P4Vector(1, -1, 1, 1),\n",
        "    new P4Vector(1, 1, 1, 1), new P4Vector(-1, 1, 1, 1),\n",
        "    new P4Vector(-1, -1, -1, -1), new P4Vector(1, -1, -1, -1),\n",
        "    new P4Vector(1, 1, -1, -1), new P4Vector(-1, 1, -1, -1),\n",
        "    new P4Vector(-1, -1, 1, -1), new P4Vector(1, -1, 1, -1),\n",
        "    new P4Vector(1, 1, 1, -1), new P4Vector(-1, 1, 1, -1)\n",
        "  ];\n",
        "}\n",
        "\n",
        "function draw() {\n",
        "  background(0);\n",
        "  rotateX(-PI / 2);\n",
        "\n",
        "  let zoom = 0.4;\n",
        "  let scale = width * zoom;\n",
        "  let projected3d = [];\n",
        "\n",
        "  for (let i = 0; i < points.length; i++) {\n",
        "    let v = points[i];\n",
        "\n",
        "    let rotationXY = [\n",
        "      [cos(angle), -sin(angle), 0, 0],\n",
        "      [sin(angle), cos(angle), 0, 0],\n",
        "      [0, 0, 1, 0],\n",
        "      [0, 0, 0, 1]\n",
        "    ];\n",
        "\n",
        "    let rotationZW = [\n",
        "      [1, 0, 0, 0],\n",
        "      [0, 1, 0, 0],\n",
        "      [0, 0, cos(angle), -sin(angle)],\n",
        "      [0, 0, sin(angle), cos(angle)]\n",
        "    ];\n",
        "\n",
        "    let rotated = matmul(rotationXY, v);\n",
        "    rotated = matmul(rotationZW, rotated);\n",
        "\n",
        "    let distance = 2;\n",
        "    let w = 1 / (distance - rotated.w);\n",
        "\n",
        "    let projection = [\n",
        "      [w, 0, 0, 0],\n",
        "      [0, w, 0, 0],\n",
        "      [0, 0, w, 0]\n",
        "    ];\n",
        "\n",
        "    let projected = matmul(projection, rotated);\n",
        "\n",
        "    projected.x = (projected.x + 1) / 2 * scale;\n",
        "    projected.y = (projected.y + 1) / 2 * scale;\n",
        "    projected.z = (projected.z + 1) / 2 * scale;\n",
        "\n",
        "    projected3d[i] = projected;\n",
        "\n",
        "    stroke(255, 200);\n",
        "    strokeWeight(8);\n",
        "    point(projected.x, projected.y, projected.z);\n",
        "  }\n",
        "\n",
        "  for (let i = 0; i < 4; i++) {\n",
        "    connect(0, i, (i + 1) % 4, projected3d);\n",
        "    connect(0, i + 4, ((i + 1) % 4) + 4, projected3d);\n",
        "    connect(0, i, i + 4, projected3d);\n",
        "  }\n",
        "\n",
        "  for (let i = 0; i < 4; i++) {\n",
        "    connect(8, i, (i + 1) % 4, projected3d);\n",
        "    connect(8, i + 4, ((i + 1) % 4) + 4, projected3d);\n",
        "    connect(8, i, i + 4, projected3d);\n",
        "  }\n",
        "\n",
        "  for (let i = 0; i < 8; i++) {\n",
        "    connect(0, i, i + 8, projected3d);\n",
        "  }\n",
        "\n",
        "  let scaleVec = v => createVector(v[0], v[1], v[2]).mult(scale);\n",
        "  let p0 = scaleVec([0, 0, 0]);\n",
        "  let p1 = scaleVec([1, 1, 1]);\n",
        "  let p2 = scaleVec([0.87, 0.87, 0.87]);\n",
        "\n",
        "  // Static cube\n",
        "  let cubeCorners = [\n",
        "    [0, 0, 0], [1, 0, 0], [1, 1, 0], [0, 1, 0],\n",
        "    [0, 0, 1], [1, 0, 1], [1, 1, 1], [0, 1, 1]\n",
        "  ];\n",
        "\n",
        "  stroke(100);\n",
        "  strokeWeight(6);\n",
        "  for (let pt of cubeCorners) {\n",
        "    point(pt[0] * scale, pt[1] * scale, pt[2] * scale);\n",
        "  }\n",
        "\n",
        "  let cubeEdges = [\n",
        "    [0,1],[1,2],[2,3],[3,0],\n",
        "    [4,5],[5,6],[6,7],[7,4],\n",
        "    [0,4],[1,5],[2,6],[3,7]\n",
        "  ];\n",
        "\n",
        "  strokeWeight(1);\n",
        "  for (let [i, j] of cubeEdges) {\n",
        "    let a = cubeCorners[i];\n",
        "    let b = cubeCorners[j];\n",
        "    line(a[0]*scale,a[1]*scale,a[2]*scale,b[0]*scale,b[1]*scale,b[2]*scale);\n",
        "  }\n",
        "\n",
        "  // Red corners\n",
        "  stroke(255, 0, 0);\n",
        "  strokeWeight(12);\n",
        "  point(p0.x, p0.y, p0.z);\n",
        "  point(p1.x, p1.y, p1.z);\n",
        "\n",
        "  // Blue MSNE point\n",
        "  stroke(0, 100, 255);\n",
        "  strokeWeight(12);\n",
        "  point(p2.x, p2.y, p2.z);\n",
        "\n",
        "  // Axis lines through blue\n",
        "  strokeWeight(2);\n",
        "  stroke(200, 120, 0); // Orange (X)\n",
        "  line(0, p2.y, p2.z, scale, p2.y, p2.z);\n",
        "\n",
        "  stroke(100, 200, 200); // Cyan (Y)\n",
        "  line(p2.x, 0, p2.z, p2.x, scale, p2.z);\n",
        "\n",
        "  stroke(200, 100, 200); // Magenta (Z)\n",
        "  line(p2.x, p2.y, 0, p2.x, p2.y, scale);\n",
        "\n",
        "  // Orange ends to red corners\n",
        "  stroke(200, 120, 0);\n",
        "  line(0, 0.87 * scale, 0.87 * scale, 0, 0, 0);\n",
        "  line(scale, 0.87 * scale, 0.87 * scale, scale, scale, scale);\n",
        "\n",
        "  // Cyan ends to red corners\n",
        "  stroke(180, 180, 255);\n",
        "  line(0.87 * scale, scale, 0.87 * scale, scale, scale, scale);\n",
        "  stroke(100, 200, 200);\n",
        "  line(0.87 * scale, 0, 0.87 * scale, 0, 0, 0);\n",
        "\n",
        "  // Magenta ends to red corners\n",
        "  stroke(200, 100, 200);\n",
        "  line(0.87 * scale, 0.87 * scale, 0, 0, 0, 0);\n",
        "  line(0.87 * scale, 0.87 * scale, scale, scale, scale, scale);\n",
        "\n",
        "  angle += 0.02;\n",
        "}\n",
        "\n",
        "function connect(offset, i, j, points) {\n",
        "  strokeWeight(2);\n",
        "  stroke(255);\n",
        "  let a = points[i + offset];\n",
        "  let b = points[j + offset];\n",
        "  line(a.x, a.y, a.z, b.x, b.y, b.z);\n",
        "}\n",
        "\n",
        "class P4Vector {\n",
        "  constructor(x, y, z, w) {\n",
        "    this.x = x || 0;\n",
        "    this.y = y || 0;\n",
        "    this.z = z || 0;\n",
        "    this.w = w || 0;\n",
        "  }\n",
        "  mult(f) {\n",
        "    this.x *= f;\n",
        "    this.y *= f;\n",
        "    this.z *= f;\n",
        "    this.w *= f;\n",
        "  }\n",
        "}\n",
        "\n",
        "function matmul(a, b) {\n",
        "  let result = new P4Vector();\n",
        "  result.x = a[0][0]*b.x + a[0][1]*b.y + a[0][2]*b.z + a[0][3]*b.w;\n",
        "  result.y = a[1][0]*b.x + a[1][1]*b.y + a[1][2]*b.z + a[1][3]*b.w;\n",
        "  result.z = a[2][0]*b.x + a[2][1]*b.y + a[2][2]*b.z + a[2][3]*b.w;\n",
        "  if (a.length > 3) {\n",
        "    result.w = a[3][0]*b.x + a[3][1]*b.y + a[3][2]*b.z + a[3][3]*b.w;\n",
        "  }\n",
        "  return result;\n",
        "}"
      ],
      "metadata": {
        "id": "3kjrF-lbyNa_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "let angle = 0;\n",
        "let points = [];\n",
        "let font;\n",
        "\n",
        "function preload() {\n",
        "  font = loadFont('assets/Roboto-Regular.ttf'); // Make sure the path and font name match your file\n",
        "}\n",
        "\n",
        "function setup() {\n",
        "  let canvasSize = min(windowWidth, windowHeight);\n",
        "  createCanvas(canvasSize, canvasSize, WEBGL);\n",
        "  textFont(font);\n",
        "\n",
        "  // Define 4D hypercube points\n",
        "  points[0] = new P4Vector(-1, -1, -1, 1);\n",
        "  points[1] = new P4Vector(1, -1, -1, 1);\n",
        "  points[2] = new P4Vector(1, 1, -1, 1);\n",
        "  points[3] = new P4Vector(-1, 1, -1, 1);\n",
        "  points[4] = new P4Vector(-1, -1, 1, 1);\n",
        "  points[5] = new P4Vector(1, -1, 1, 1);\n",
        "  points[6] = new P4Vector(1, 1, 1, 1);\n",
        "  points[7] = new P4Vector(-1, 1, 1, 1);\n",
        "  points[8] = new P4Vector(-1, -1, -1, -1);\n",
        "  points[9] = new P4Vector(1, -1, -1, -1);\n",
        "  points[10] = new P4Vector(1, 1, -1, -1);\n",
        "  points[11] = new P4Vector(-1, 1, -1, -1);\n",
        "  points[12] = new P4Vector(-1, -1, 1, -1);\n",
        "  points[13] = new P4Vector(1, -1, 1, -1);\n",
        "  points[14] = new P4Vector(1, 1, 1, -1);\n",
        "  points[15] = new P4Vector(-1, 1, 1, -1);\n",
        "}\n",
        "\n",
        "function draw() {\n",
        "  background(0);\n",
        "  rotateX(-PI / 2);\n",
        "  let zoom = 0.4;\n",
        "  let projected3d = [];\n",
        "\n",
        "  for (let i = 0; i < points.length; i++) {\n",
        "    let v = points[i];\n",
        "\n",
        "    let rotationXY = [\n",
        "      [cos(angle), -sin(angle), 0, 0],\n",
        "      [sin(angle), cos(angle), 0, 0],\n",
        "      [0, 0, 1, 0],\n",
        "      [0, 0, 0, 1]\n",
        "    ];\n",
        "\n",
        "    let rotationZW = [\n",
        "      [1, 0, 0, 0],\n",
        "      [0, 1, 0, 0],\n",
        "      [0, 0, cos(angle), -sin(angle)],\n",
        "      [0, 0, sin(angle), cos(angle)]\n",
        "    ];\n",
        "\n",
        "    let rotated = matmul(rotationXY, v);\n",
        "    rotated = matmul(rotationZW, rotated);\n",
        "\n",
        "    let distance = 2;\n",
        "    let w = 1 / (distance - rotated.w);\n",
        "    let projection = [\n",
        "      [w, 0, 0, 0],\n",
        "      [0, w, 0, 0],\n",
        "      [0, 0, w, 0]\n",
        "    ];\n",
        "\n",
        "    let projected = matmul(projection, rotated);\n",
        "    projected.x = (projected.x + 1) / 2 * width * zoom;\n",
        "    projected.y = (projected.y + 1) / 2 * height * zoom;\n",
        "    projected.z = (projected.z + 1) / 2 * width * zoom;\n",
        "    projected3d[i] = projected;\n",
        "\n",
        "    stroke(255, 200);\n",
        "    strokeWeight(8);\n",
        "    point(projected.x, projected.y, projected.z);\n",
        "  }\n",
        "\n",
        "  for (let i = 0; i < 4; i++) {\n",
        "    connect(0, i, (i + 1) % 4, projected3d);\n",
        "    connect(0, i + 4, ((i + 1) % 4) + 4, projected3d);\n",
        "    connect(0, i, i + 4, projected3d);\n",
        "  }\n",
        "\n",
        "  for (let i = 0; i < 4; i++) {\n",
        "    connect(8, i, (i + 1) % 4, projected3d);\n",
        "    connect(8, i + 4, ((i + 1) % 4) + 4, projected3d);\n",
        "    connect(8, i, i + 4, projected3d);\n",
        "  }\n",
        "\n",
        "  for (let i = 0; i < 8; i++) {\n",
        "    connect(0, i, i + 8, projected3d);\n",
        "  }\n",
        "\n",
        "  // Axis labels\n",
        "  push();\n",
        "  fill(255);\n",
        "  noStroke();\n",
        "  textSize(14);\n",
        "  textAlign(CENTER, CENTER);\n",
        "  text(\"0\", 0 * width * zoom, -15, 0);\n",
        "  text(\"1\", 1 * width * zoom, -15, 0);\n",
        "  text(\"0\", -25, 0 * height * zoom, 0);\n",
        "  text(\"1\", -25, 1 * height * zoom, 0);\n",
        "  text(\"0\", -10, -10, 0 * width * zoom);\n",
        "  text(\"1\", -10, -10, 1 * width * zoom);\n",
        "  pop();\n",
        "\n",
        "  angle += 0.02;\n",
        "}\n",
        "\n",
        "function connect(offset, i, j, points) {\n",
        "  strokeWeight(2);\n",
        "  stroke(255);\n",
        "  let a = points[i + offset];\n",
        "  let b = points[j + offset];\n",
        "  if (a && b) {\n",
        "    line(a.x, a.y, a.z, b.x, b.y, b.z);\n",
        "  }\n",
        "}\n",
        "\n",
        "class P4Vector {\n",
        "  constructor(x, y, z, w) {\n",
        "    this.x = x || 0;\n",
        "    this.y = y || 0;\n",
        "    this.z = z || 0;\n",
        "    this.w = w || 0;\n",
        "  }\n",
        "\n",
        "  mult(f) {\n",
        "    this.x *= f;\n",
        "    this.y *= f;\n",
        "    this.z *= f;\n",
        "    this.w *= f;\n",
        "  }\n",
        "}\n",
        "\n",
        "function matmul(a, b) {\n",
        "  let result = new P4Vector();\n",
        "  result.x = a[0][0] * b.x + a[0][1] * b.y + a[0][2] * b.z + a[0][3] * b.w;\n",
        "  result.y = a[1][0] * b.x + a[1][1] * b.y + a[1][2] * b.z + a[1][3] * b.w;\n",
        "  result.z = a[2][0] * b.x + a[2][1] * b.y + a[2][2] * b.z + a[2][3] * b.w;\n",
        "  if (a.length > 3) {\n",
        "    result.w = a[3][0] * b.x + a[3][1] * b.y + a[3][2] * b.z + a[3][3] * b.w;\n",
        "  }\n",
        "  return result;\n",
        "}\n",
        "\n"
      ],
      "metadata": {
        "id": "IIaczBOKjrLr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "let angle = 0;\n",
        "let points = [];\n",
        "let myFont;\n",
        "\n",
        "function preload() {\n",
        "  myFont = loadFont('Roboto-Regular.js'); // ✅ no font warning\n",
        "}\n",
        "\n",
        "function setup() {\n",
        "  let canvasSize = min(windowWidth, windowHeight);\n",
        "  createCanvas(canvasSize, canvasSize, WEBGL);\n",
        "\n",
        "  textAlign(CENTER, CENTER);\n",
        "  textFont(myFont);\n",
        "  textSize(14);\n",
        "  fill(255);\n",
        "\n",
        "  // Define 4D hypercube points\n",
        "  points[0] = new P4Vector(-1, -1, -1, 1);\n",
        "  points[1] = new P4Vector(1, -1, -1, 1);\n",
        "  points[2] = new P4Vector(1, 1, -1, 1);\n",
        "  points[3] = new P4Vector(-1, 1, -1, 1);\n",
        "  points[4] = new P4Vector(-1, -1, 1, 1);\n",
        "  points[5] = new P4Vector(1, -1, 1, 1);\n",
        "  points[6] = new P4Vector(1, 1, 1, 1);\n",
        "  points[7] = new P4Vector(-1, 1, 1, 1);\n",
        "  points[8] = new P4Vector(-1, -1, -1, -1);\n",
        "  points[9] = new P4Vector(1, -1, -1, -1);\n",
        "  points[10] = new P4Vector(1, 1, -1, -1);\n",
        "  points[11] = new P4Vector(-1, 1, -1, -1);\n",
        "  points[12] = new P4Vector(-1, -1, 1, -1);\n",
        "  points[13] = new P4Vector(1, -1, 1, -1);\n",
        "  points[14] = new P4Vector(1, 1, 1, -1);\n",
        "  points[15] = new P4Vector(-1, 1, 1, -1);\n",
        "}\n",
        "\n",
        "function draw() {\n",
        "  background(0);\n",
        "  rotateX(-PI / 2);\n",
        "  let zoom = 0.4;\n",
        "  let projected3d = [];\n",
        "\n",
        "  for (let i = 0; i < points.length; i++) {\n",
        "    let v = points[i];\n",
        "    let rotationXY = [\n",
        "      [cos(angle), -sin(angle), 0, 0],\n",
        "      [sin(angle), cos(angle), 0, 0],\n",
        "      [0, 0, 1, 0],\n",
        "      [0, 0, 0, 1]\n",
        "    ];\n",
        "    let rotationZW = [\n",
        "      [1, 0, 0, 0],\n",
        "      [0, 1, 0, 0],\n",
        "      [0, 0, cos(angle), -sin(angle)],\n",
        "      [0, 0, sin(angle), cos(angle)]\n",
        "    ];\n",
        "    let rotated = matmul(rotationXY, v);\n",
        "    rotated = matmul(rotationZW, rotated);\n",
        "\n",
        "    let distance = 2;\n",
        "    let w = 1 / (distance - rotated.w);\n",
        "    let projection = [\n",
        "      [w, 0, 0, 0],\n",
        "      [0, w, 0, 0],\n",
        "      [0, 0, w, 0]\n",
        "    ];\n",
        "    let projected = matmul(projection, rotated);\n",
        "\n",
        "    projected.x = ((projected.x + 1) / 2 - 0.5) * width * zoom;\n",
        "    projected.y = ((projected.y + 1) / 2 - 0.5) * height * zoom;\n",
        "    projected.z = ((projected.z + 1) / 2 - 0.5) * width * zoom;\n",
        "    projected3d[i] = projected;\n",
        "\n",
        "    stroke(255, 200);\n",
        "    strokeWeight(8);\n",
        "    point(projected.x, projected.y, projected.z);\n",
        "  }\n",
        "\n",
        "  for (let i = 0; i < 4; i++) {\n",
        "    connect(0, i, (i + 1) % 4, projected3d);\n",
        "    connect(0, i + 4, ((i + 1) % 4) + 4, projected3d);\n",
        "    connect(0, i, i + 4, projected3d);\n",
        "  }\n",
        "\n",
        "  for (let i = 0; i < 4; i++) {\n",
        "    connect(8, i, (i + 1) % 4, projected3d);\n",
        "    connect(8, i + 4, ((i + 1) % 4) + 4, projected3d);\n",
        "    connect(8, i, i + 4, projected3d);\n",
        "  }\n",
        "\n",
        "  for (let i = 0; i < 8; i++) {\n",
        "    connect(0, i, i + 8, projected3d);\n",
        "  }\n",
        "\n",
        "  // Static cube\n",
        "  let cubeCorners = [\n",
        "    [0, 0, 0], [1, 0, 0], [1, 1, 0], [0, 1, 0],\n",
        "    [0, 0, 1], [1, 0, 1], [1, 1, 1], [0, 1, 1]\n",
        "  ];\n",
        "  stroke(100);\n",
        "  strokeWeight(6);\n",
        "  for (let pt of cubeCorners) {\n",
        "    point((pt[0] - 0.5) * width * zoom, (pt[1] - 0.5) * height * zoom, (pt[2] - 0.5) * width * zoom);\n",
        "  }\n",
        "\n",
        "  let cubeEdges = [\n",
        "    [0,1],[1,2],[2,3],[3,0],\n",
        "    [4,5],[5,6],[6,7],[7,4],\n",
        "    [0,4],[1,5],[2,6],[3,7]\n",
        "  ];\n",
        "  strokeWeight(1);\n",
        "  for (let [i, j] of cubeEdges) {\n",
        "    let a = cubeCorners[i];\n",
        "    let b = cubeCorners[j];\n",
        "    line(\n",
        "      (a[0] - 0.5) * width * zoom, (a[1] - 0.5) * height * zoom, (a[2] - 0.5) * width * zoom,\n",
        "      (b[0] - 0.5) * width * zoom, (b[1] - 0.5) * height * zoom, (b[2] - 0.5) * width * zoom\n",
        "    );\n",
        "  }\n",
        "\n",
        "  // Points\n",
        "  let p0 = { x: (0 - 0.5) * width * zoom, y: (0 - 0.5) * height * zoom, z: (0 - 0.5) * width * zoom };\n",
        "  let p1 = { x: (1 - 0.5) * width * zoom, y: (1 - 0.5) * height * zoom, z: (1 - 0.5) * width * zoom };\n",
        "  let p2 = { x: (0.87 - 0.5) * width * zoom, y: (0.87 - 0.5) * height * zoom, z: (0.87 - 0.5) * width * zoom };\n",
        "\n",
        "  stroke(255, 0, 0);\n",
        "  strokeWeight(12);\n",
        "  point(p0.x, p0.y, p0.z);\n",
        "  point(p1.x, p1.y, p1.z);\n",
        "\n",
        "  stroke(0, 100, 255);\n",
        "  point(p2.x, p2.y, p2.z);\n",
        "\n",
        "  // Axis lines through blue point\n",
        "  strokeWeight(2);\n",
        "  stroke(200, 120, 0);\n",
        "  line(-width * zoom / 2, p2.y, p2.z, width * zoom / 2, p2.y, p2.z);\n",
        "  stroke(100, 200, 200);\n",
        "  line(p2.x, -height * zoom / 2, p2.z, p2.x, height * zoom / 2, p2.z);\n",
        "  stroke(200, 100, 200);\n",
        "  line(p2.x, p2.y, -width * zoom / 2, p2.x, p2.y, width * zoom / 2);\n",
        "\n",
        "  // Labels\n",
        "  push();\n",
        "  translate(p0.x, p0.y - 20, p0.z);\n",
        "  fill(255);\n",
        "  text(\"(0, 0, 0)\", 0, 0);\n",
        "  pop();\n",
        "\n",
        "  push();\n",
        "  translate(p1.x, p1.y - 20, p1.z);\n",
        "  fill(255);\n",
        "  text(\"(1, 1, 1)\", 0, 0);\n",
        "  pop();\n",
        "\n",
        "  angle += 0.02;\n",
        "}\n",
        "\n",
        "function connect(offset, i, j, points) {\n",
        "  strokeWeight(2);\n",
        "  stroke(255);\n",
        "  let a = points[i + offset];\n",
        "  let b = points[j + offset];\n",
        "  if (a && b) {\n",
        "    line(a.x, a.y, a.z, b.x, b.y, b.z);\n",
        "  }\n",
        "}\n",
        "\n",
        "class P4Vector {\n",
        "  constructor(x, y, z, w) {\n",
        "    this.x = x || 0;\n",
        "    this.y = y || 0;\n",
        "    this.z = z || 0;\n",
        "    this.w = w || 0;\n",
        "  }\n",
        "  mult(f) {\n",
        "    this.x *= f;\n",
        "    this.y *= f;\n",
        "    this.z *= f;\n",
        "    this.w *= f;\n",
        "  }\n",
        "}\n",
        "\n",
        "function matmul(a, b) {\n",
        "  let result = new P4Vector();\n",
        "  result.x = a[0][0] * b.x + a[0][1] * b.y + a[0][2] * b.z + a[0][3] * b.w;\n",
        "  result.y = a[1][0] * b.x + a[1][1] * b.y + a[1][2] * b.z + a[1][3] * b.w;\n",
        "  result.z = a[2][0] * b.x + a[2][1] * b.y + a[2][2] * b.z + a[2][3] * b.w;\n",
        "  if (a.length > 3) {\n",
        "    result.w = a[3][0] * b.x + a[3][1] * b.y + a[3][2] * b.z + a[3][3] * b.w;\n",
        "  }\n",
        "  return result;\n",
        "}"
      ],
      "metadata": {
        "id": "yz65iNIWptL-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "let angle = 0;\n",
        "let threshold;\n",
        "let showDot = false;\n",
        "let points = [];\n",
        "\n",
        "#Creating 4d Tesseract projection\n",
        "function setup() {\n",
        "  let canvasSize = min(windowWidth, windowHeight);\n",
        "  createCanvas(canvasSize, canvasSize, WEBGL);\n",
        "  threshold = 0.87 * PI; // use half-rotation to match visible cycle\n",
        "\n",
        "  points = [\n",
        "    new P4Vector(-1, -1, -1, 1), new P4Vector(1, -1, -1, 1),\n",
        "    new P4Vector(1, 1, -1, 1), new P4Vector(-1, 1, -1, 1),\n",
        "    new P4Vector(-1, -1, 1, 1), new P4Vector(1, -1, 1, 1),\n",
        "    new P4Vector(1, 1, 1, 1), new P4Vector(-1, 1, 1, 1),\n",
        "    new P4Vector(-1, -1, -1, -1), new P4Vector(1, -1, -1, -1),\n",
        "    new P4Vector(1, 1, -1, -1), new P4Vector(-1, 1, -1, -1),\n",
        "    new P4Vector(-1, -1, 1, -1), new P4Vector(1, -1, 1, -1),\n",
        "    new P4Vector(1, 1, 1, -1), new P4Vector(-1, 1, 1, -1)\n",
        "  ];\n",
        "}\n",
        "\n",
        "function draw() {\n",
        "  background(255);\n",
        "  rotateX(-PI / 2);\n",
        "\n",
        "  let zoom = 0.4;\n",
        "  let scalingFactor = width * zoom;\n",
        "  let projected3d = [];\n",
        "\n",
        "  for (let i = 0; i < points.length; i++) {\n",
        "    let v = points[i];\n",
        "\n",
        "    let rotationXY = [\n",
        "      [cos(angle), -sin(angle), 0, 0],\n",
        "      [sin(angle), cos(angle), 0, 0],\n",
        "      [0, 0, 1, 0],\n",
        "      [0, 0, 0, 1]\n",
        "    ];\n",
        "\n",
        "    let rotationZW = [\n",
        "      [1, 0, 0, 0],\n",
        "      [0, 1, 0, 0],\n",
        "      [0, 0, cos(angle), -sin(angle)],\n",
        "      [0, 0, sin(angle), cos(angle)]\n",
        "    ];\n",
        "\n",
        "    let rotated = matmul(rotationXY, v);\n",
        "    rotated = matmul(rotationZW, rotated);\n",
        "\n",
        "    let distance = 2;\n",
        "    let w = 1 / (distance - rotated.w);\n",
        "\n",
        "    let projection = [\n",
        "      [w, 0, 0, 0],\n",
        "      [0, w, 0, 0],\n",
        "      [0, 0, w, 0]\n",
        "    ];\n",
        "\n",
        "    let projected = matmul(projection, rotated);\n",
        "\n",
        "    projected.x = (projected.x + 1) / 2 * scalingFactor;\n",
        "    projected.y = (projected.y + 1) / 2 * scalingFactor;\n",
        "    projected.z = (projected.z + 1) / 2 * scalingFactor;\n",
        "\n",
        "    projected3d[i] = projected;\n",
        "\n",
        "    stroke(150);\n",
        "    strokeWeight(8);\n",
        "    point(projected.x, projected.y, projected.z);\n",
        "  }\n",
        "\n",
        "  for (let i = 0; i < 4; i++) {\n",
        "    connect(0, i, (i + 1) % 4, projected3d);\n",
        "    connect(0, i + 4, ((i + 1) % 4) + 4, projected3d);\n",
        "    connect(0, i, i + 4, projected3d);\n",
        "  }\n",
        "\n",
        "  for (let i = 0; i < 4; i++) {\n",
        "    connect(8, i, (i + 1) % 4, projected3d);\n",
        "    connect(8, i + 4, ((i + 1) % 4) + 4, projected3d);\n",
        "    connect(8, i, i + 4, projected3d);\n",
        "  }\n",
        "\n",
        "  for (let i = 0; i < 8; i++) {\n",
        "    connect(0, i, i + 8, projected3d);\n",
        "  }\n",
        "\n",
        "  let scaleVec = v => createVector(v[0], v[1], v[2]).mult(scalingFactor);\n",
        "  let p0 = scaleVec([0, 0, 0]);\n",
        "  let p1 = scaleVec([1, 1, 1]);\n",
        "  let p2 = scaleVec([0.87, 0.87, 0.87]);\n",
        "\n",
        "  #Creating 3d reference cube\n",
        "  let cubeCorners = [\n",
        "    [0, 0, 0], [1, 0, 0], [1, 1, 0], [0, 1, 0],\n",
        "    [0, 0, 1], [1, 0, 1], [1, 1, 1], [0, 1, 1]\n",
        "  ];\n",
        "\n",
        "  stroke(0);\n",
        "  strokeWeight(6);\n",
        "  for (let pt of cubeCorners) {\n",
        "    point(pt[0] * scalingFactor, pt[1] * scalingFactor, pt[2] * scalingFactor);\n",
        "  }\n",
        "\n",
        "  let cubeEdges = [\n",
        "    [0,1],[1,2],[2,3],[3,0],\n",
        "    [4,5],[5,6],[6,7],[7,4],\n",
        "    [0,4],[1,5],[2,6],[3,7]\n",
        "  ];\n",
        "\n",
        "  strokeWeight(1);\n",
        "  for (let [i, j] of cubeEdges) {\n",
        "    let a = cubeCorners[i];\n",
        "    let b = cubeCorners[j];\n",
        "    line(a[0]*scalingFactor,a[1]*scalingFactor,a[2]*scalingFactor,b[0]*scalingFactor,b[1]*scalingFactor,b[2]*scalingFactor);\n",
        "  }\n",
        "\n",
        "  stroke(255, 0, 0);\n",
        "  strokeWeight(12);\n",
        "  point(p0.x, p0.y, p0.z);\n",
        "  point(p1.x, p1.y, p1.z);\n",
        "\n",
        "  stroke(0, 100, 255);\n",
        "  strokeWeight(12);\n",
        "  point(p2.x, p2.y, p2.z);\n",
        "\n",
        "  strokeWeight(2);\n",
        "  stroke(200, 120, 0);\n",
        "  line(0, p2.y, p2.z, scalingFactor, p2.y, p2.z);\n",
        "  stroke(100, 200, 200);\n",
        "  line(p2.x, 0, p2.z, p2.x, scalingFactor, p2.z);\n",
        "  stroke(200, 100, 200);\n",
        "  line(p2.x, p2.y, 0, p2.x, p2.y, scalingFactor);\n",
        "\n",
        "  stroke(200, 120, 0);\n",
        "  line(0, 0.87 * scalingFactor, 0.87 * scalingFactor, 0, 0, 0);\n",
        "  line(scalingFactor, 0.87 * scalingFactor, 0.87 * scalingFactor, scalingFactor, scalingFactor, scalingFactor);\n",
        "  stroke(180, 180, 255);\n",
        "  line(0.87 * scalingFactor, scalingFactor, 0.87 * scalingFactor, scalingFactor, scalingFactor, scalingFactor);\n",
        "  stroke(100, 200, 200);\n",
        "  line(0.87 * scalingFactor, 0, 0.87 * scalingFactor, 0, 0, 0);\n",
        "  stroke(200, 100, 200);\n",
        "  line(0.87 * scalingFactor, 0.87 * scalingFactor, 0, 0, 0, 0);\n",
        "  line(0.87 * scalingFactor, 0.87 * scalingFactor, scalingFactor, scalingFactor, scalingFactor, scalingFactor);\n",
        "\n",
        " #Showing when MSNE threshold is passed by the fourth player\n",
        "  if (abs(angle - threshold) < 0.1) {\n",
        "    showDot = true;\n",
        "    console.log(\"Threshold passed\");\n",
        "  }\n",
        "\n",
        "  if (showDot) {\n",
        "    push();\n",
        "    noStroke();\n",
        "    fill(255, 0, 0);\n",
        "    ellipse(0, 0, 30, 30);\n",
        "    pop();\n",
        "  }\n",
        "\n",
        "#Defining rotation\n",
        "  angle = (angle + 0.02) % PI; // mod PI to sync with visual loop\n",
        "}\n",
        "\n",
        "function connect(offset, i, j, points) {\n",
        "  strokeWeight(2);\n",
        "  stroke(150);\n",
        "  let a = points[i + offset];\n",
        "  let b = points[j + offset];\n",
        "  line(a.x, a.y, a.z, b.x, b.y, b.z);\n",
        "}\n",
        "\n",
        "class P4Vector {\n",
        "  constructor(x, y, z, w) {\n",
        "    this.x = x || 0;\n",
        "    this.y = y || 0;\n",
        "    this.z = z || 0;\n",
        "    this.w = w || 0;\n",
        "  }\n",
        "  mult(f) {\n",
        "    this.x *= f;\n",
        "    this.y *= f;\n",
        "    this.z *= f;\n",
        "    this.w *= f;\n",
        "  }\n",
        "}\n",
        "\n",
        "function matmul(a, b) {\n",
        "  let result = new P4Vector();\n",
        "  result.x = a[0][0]*b.x + a[0][1]*b.y + a[0][2]*b.z + a[0][3]*b.w;\n",
        "  result.y = a[1][0]*b.x + a[1][1]*b.y + a[1][2]*b.z + a[1][3]*b.w;\n",
        "  result.z = a[2][0]*b.x + a[2][1]*b.y + a[2][2]*b.z + a[2][3]*b.w;\n",
        "  if (a.length > 3) {\n",
        "    result.w = a[3][0]*b.x + a[3][1]*b.y + a[3][2]*b.z + a[3][3]*b.w;\n",
        "  }\n",
        "  return result;\n",
        "}\n"
      ],
      "metadata": {
        "id": "99Y0hMf8L2D5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Shows what graph would look like if results were from a 3 player stag hunt"
      ],
      "metadata": {
        "id": "BVlSQ0COKt9c"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "let zoom = 0.4;\n",
        "let angle = 0;\n",
        "\n",
        "function setup() {\n",
        "  let canvasSize = min(windowWidth, windowHeight);\n",
        "  createCanvas(canvasSize, canvasSize, WEBGL);\n",
        "}\n",
        "\n",
        "function draw() {\n",
        "  background(255);\n",
        "  orbitControl(); // allows mouse drag + scroll zoom\n",
        "\n",
        "  // Slightly improved viewing angle\n",
        "  rotateX(-PI / 5.5);  // ~ -33°, more top face visible\n",
        "  rotateY(angle + 0.2); // subtle skew so depth pops better\n",
        "\n",
        "  // Lighting for 3D depth\n",
        "  ambientLight(160);\n",
        "  directionalLight(255, 255, 255, 0.5, 1, 0.5);\n",
        "\n",
        "  let scalingFactor = width * zoom;\n",
        "\n",
        "  // Key points\n",
        "  let p0 = createVector(0, 0, 0).mult(scalingFactor);\n",
        "  let p1 = createVector(1, 1, 1).mult(scalingFactor);\n",
        "  let p2 = createVector(0.87, 0.87, 0.87).mult(scalingFactor);\n",
        "\n",
        "  // Cube corners\n",
        "  let cubeCorners = [\n",
        "    [0, 0, 0], [1, 0, 0], [1, 1, 0], [0, 1, 0],\n",
        "    [0, 0, 1], [1, 0, 1], [1, 1, 1], [0, 1, 1]\n",
        "  ];\n",
        "\n",
        "  stroke(0);\n",
        "  strokeWeight(2);\n",
        "  for (let pt of cubeCorners) {\n",
        "    point(pt[0] * scalingFactor, pt[1] * scalingFactor, pt[2] * scalingFactor);\n",
        "  }\n",
        "\n",
        "  // Cube edges\n",
        "  let cubeEdges = [\n",
        "    [0,1],[1,2],[2,3],[3,0],\n",
        "    [4,5],[5,6],[6,7],[7,4],\n",
        "    [0,4],[1,5],[2,6],[3,7]\n",
        "  ];\n",
        "\n",
        "  strokeWeight(1.5);\n",
        "  for (let [i, j] of cubeEdges) {\n",
        "    let a = cubeCorners[i];\n",
        "    let b = cubeCorners[j];\n",
        "    line(a[0]*scalingFactor,a[1]*scalingFactor,a[2]*scalingFactor,\n",
        "         b[0]*scalingFactor,b[1]*scalingFactor,b[2]*scalingFactor);\n",
        "  }\n",
        "\n",
        "  // Draw spheres for key points\n",
        "  noStroke();\n",
        "  strokeWeight(1);\n",
        "\n",
        "  push();\n",
        "  translate(p0.x, p0.y, p0.z);\n",
        "  fill(255, 0, 0);\n",
        "  sphere(10);\n",
        "  pop();\n",
        "\n",
        "  push();\n",
        "  translate(p1.x, p1.y, p1.z);\n",
        "  fill(255, 0, 0);\n",
        "  sphere(10);\n",
        "  pop();\n",
        "\n",
        "  push();\n",
        "  translate(p2.x, p2.y, p2.z);\n",
        "  fill(0, 100, 255);\n",
        "  sphere(10);\n",
        "  pop();\n",
        "\n",
        "  // Axis-aligned best response lines through p2\n",
        "  strokeWeight(2);\n",
        "\n",
        "  stroke(200, 120, 0);\n",
        "  line(0, p2.y, p2.z, scalingFactor, p2.y, p2.z);\n",
        "\n",
        "  stroke(100, 200, 200);\n",
        "  line(p2.x, 0, p2.z, p2.x, scalingFactor, p2.z);\n",
        "\n",
        "  stroke(200, 100, 200);\n",
        "  line(p2.x, p2.y, 0, p2.x, p2.y, scalingFactor);\n",
        "\n",
        "  // Extra support lines\n",
        "  stroke(200, 120, 0);\n",
        "  line(0, 0.87 * scalingFactor, 0.87 * scalingFactor, 0, 0, 0);\n",
        "  line(scalingFactor, 0.87 * scalingFactor, 0.87 * scalingFactor, scalingFactor, scalingFactor, scalingFactor);\n",
        "\n",
        "  stroke(180, 180, 255);\n",
        "  line(0.87 * scalingFactor, scalingFactor, 0.87 * scalingFactor, scalingFactor, scalingFactor, scalingFactor);\n",
        "\n",
        "  stroke(100, 200, 200);\n",
        "  line(0.87 * scalingFactor, 0, 0.87 * scalingFactor, 0, 0, 0);\n",
        "\n",
        "  stroke(200, 100, 200);\n",
        "  line(0.87 * scalingFactor, 0.87 * scalingFactor, 0, 0, 0, 0);\n",
        "  line(0.87 * scalingFactor, 0.87 * scalingFactor, scalingFactor, scalingFactor, scalingFactor, scalingFactor);\n",
        "\n",
        "  // Animate rotation\n",
        "  angle += 0.003;\n",
        "}\n"
      ],
      "metadata": {
        "id": "UA0oltzTlW-V"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}